import { GoogleGenAI, Type, Modality } from "@google/genai";
import type { ImageFile, GeneratedPrompts } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

// Helper to remove the data URL prefix (e.g., "data:image/png;base64,")
const getBase64Data = (dataUrl: string): string => {
    return dataUrl.split(',')[1];
}

/**
 * Generates three distinct prompts from a single reference image.
 */
export const generatePromptsFromImage = async (
    referenceImage: ImageFile
): Promise<GeneratedPrompts> => {
    try {
        const imagePart = {
            inlineData: {
                data: getBase64Data(referenceImage.base64),
                mimeType: referenceImage.mimeType,
            },
        };

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: {
                parts: [
                    { text: "reverse engineer the attached image and generate three distinct prompts that could be used to create similar image style of person and style like color, blur and other. Follow the JSON schema precisely." },
                    imagePart
                ]
            },
            config: {
                systemInstruction: "You are an expert prompt engineer for generative AI image models. Your task is to analyze a user-provided image and generate three distinct prompts. Respond ONLY with a valid JSON object that matches the provided schema.",
                responseMimeType: "application/json",
                responseSchema: {
                    type: Type.OBJECT,
                    properties: {
                        simple: {
                            type: Type.STRING,
                            description: 'A simple prompt',
                        },
                        detailed: {
                            type: Type.STRING,
                            description: 'A detailed prompt',
                        },
                        technical: {
                            type: Type.STRING,
                            description: 'A technical prompt',
                        },
                    },
                    required: ["simple", "detailed", "technical"],
                },
            },
        });
        
        // The response text should be a valid JSON string matching the schema.
        const promptsJson = response.text.trim();
        return JSON.parse(promptsJson);

    } catch (error) {
        console.error('Error generating prompts with Gemini:', error);
        if (error instanceof Error) {
            throw new Error(`Failed to generate prompts: ${error.message}`);
        }
        throw new Error('An unknown error occurred during prompt generation.');
    }
};


/**
 * Generates an image by applying a text prompt to a source image.
 */
export const generateImageFromPromptAndSource = async (
    prompt: string,
    sourceImage: ImageFile
): Promise<string> => {
     try {
        const imagePart = {
            inlineData: {
                data: getBase64Data(sourceImage.base64),
                mimeType: sourceImage.mimeType,
            },
        };

        const textPart = {
            text: `create image in this style: ${prompt}`,
        };
        
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image-preview',
            contents: {
                parts: [imagePart, textPart]
            },
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });

        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
                const base64ImageBytes: string = part.inlineData.data;
                const mimeType = part.inlineData.mimeType;
                return `data:${mimeType};base64,${base64ImageBytes}`;
            }
        }
        
        throw new Error('No image was generated by the API.');

    } catch (error) {
        console.error('Error generating image with Gemini:', error);
        if (error instanceof Error) {
            throw new Error(`Failed to generate image: ${error.message}`);
        }
        throw new Error('An unknown error occurred during image generation.');
    }
}